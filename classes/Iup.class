<?php

include_once('validators/textLengthRange.validator');
include_once('validators/int.validator');
include_once('validators/bool.validator');
include_once('validators/enum.validator');
include_once('validators/date.validator');
include_once('validators/require.validator');
include_once('validators/file.validator');
include_once('module/spravka1c/array.validator');
include_once('module/spravka1c/classes/base/BaseDocument.class');

class Iup extends BaseDocument{
	private $type = "000000004";
	private $semestr;
	private $accelerated;
	private $files;
	private $allowedStatuses = [
		"Является студентом"
	];


	public function __construct($data){
		$this->semestr = $data['semestr'];
		$this->accelerated = $data['accelerated'];
		$this->files = $data['files'];
	}


	public function Validate(){
		$documentsValidated = [];
		$acceleratedList = $this->getAcceleratedList();
		parent::validateStatus($this->allowedStatuses, spravka1c::$asr1C);
		$dataValidated = [
			['value' => $this->semestr, 'label' => 'Семестр', 'validators' => [new intValidator()]],
			['value' => $this->accelerated, 'label' => 'Тип плана', 'validators' => array(new enumValidator(array_keys($acceleratedList)))],
			['value' => $this->files, 'label' => 'Файлы документов', 'validators' => array(new arrayValidator())]
		];

		foreach($this->files as $file){
			$dataValidated[] = ['label' => 'Файл документа', 'value' => $file, 'validators' => array(new fileValidator(true, 3000, array('jpg', 'jpeg', 'pdf', 'gif', 'bmp', 'png', 'tiff')))];
		}
		if($this->files == []){
			$dataValidated[] = ['label' => 'Файл документа', 'value' => $this->files, 'validators' => array(new fileValidator(true, 3000, array('jpg', 'jpeg', 'pdf', 'gif', 'bmp', 'png', 'tiff')))];
		} 
		return parent::Validate($dataValidated);
	}


	public function GetData1C($diplomaId)
	{

		$files = $this->parseFiles($diplomaId);
		return ['student_id' => $_SESSION['user']['zbook'], 'type' => $this->type, 'course' => ceil($this->semestr / 2), 'semestr' => $this->semestr, 'accelerated' => boolval($this->accelerated), 'date_dismiss' => date('Y-m-d'), 'files' => $files];
	}


	private function parseFiles($diplomaId)
	{
		$files1c = [];
		foreach($this->files as $key => $value){
			$file1c = parent::moveFile($key, $value, $this->files[$key]['tmp_name'], $diplomaId);
            $fileData = explode('_', $key);
            $file1c['prop'] = $fileData[1]. ' '.$fileData[2]. ' от '. date('d.m.Y', strtotime($fileData[3]));
            $files1c[] = $file1c;                      
        }
        return $files1c;
	}


    public function getAcceleratedList()
    {
        $arr = array(0 => 'нет', 1 => 'да');
        return $arr;
    }


    public function GetErrors()
    {
    	return parent::GetErrors();
    }

}
